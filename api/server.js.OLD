import path from 'path';
import express from 'express';
import cookie from 'cookie';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import { graphqlExpress, graphiqlExpress } from 'apollo-server-express';
import { Engine } from 'apollo-engine';
import compression from 'compression';
import bodyParser from 'body-parser';
import { invert, isString } from 'lodash';
import { createServer } from 'http';
import { SubscriptionServer } from 'subscriptions-transport-ws';
import { execute, subscribe } from 'graphql';
import { postSchema } from './models/blog-post';
import schema from './graphql/schema';
import query from './graphql/queries/queries';
import config from './config'

//currently unused



export function run({
                    PORT: portFromEnv = 3010,
                    } = {}) {


  let port = portFromEnv;
  if (isString(portFromEnv)) {
    port = parseInt(portFromEnv, 10);
  }

  const app = express();

  const engine = new Engine({
    engineConfig: {
      apiKey: 'service:bunderwood101-Tribe:moGYExh5flMMWYjSFSbv9w',
      logging: {
           level: 'DEBUG'   // Engine Proxy logging level. DEBUG, INFO, WARN or ERROR
         }
       },
    graphqlPort:  port,
    endpoint: '/graphql',
    dumpTraffic: true
  });

  engine.start();
  app.use(engine.expressMiddleware());

  app.use(compression());

  app.use(cors());
  app.use(bodyParser.urlencoded({ extended: true }));
  app.use(bodyParser.json());

  app.use('/graphql', bodyParser.json(), graphqlExpress({
    schema,
    context: {},
    // Enable tracing:
    tracing: true,
  }));

  app.use('/graphiql', graphiqlExpress({
    endpointURL: '/graphql',
    subscriptionsEndpoint: wsGqlURL,
    query: `

 {post(_id:"59e9d02366adf5394033c520"){
  title,
  content

}
}

{
mutation {
  createPost(post: {
    title: "andy",
    content: "hope is a good thing",
  }) {
    _id
  }
}
}
  `,
  }));

  const server = createServer(app);

  server.listen(3010, () => {
    console.log(`API Server is now running on http://localhost:${port}`); // eslint-disable-line no-console
    console.log(`API Server over web socket with subscriptions is now running on ws://localhost:${port}${WS_GQL_PATH}`); // eslint-disable-line no-console
  });

  // eslint-disable-next-line
  new SubscriptionServer(
    {
      schema,
      execute,
      subscribe,

      // the onOperation function is called for every new operation
      // and we use it to set the GraphQL context for this operation
      onOperation: (msg, params, socket) => {
        return new Promise((resolve) => {
          if (!config.persistedQueries) {
            const query = params.query;
            if (query && query.length > 2000) {
              // None of our app's queries are this long
              // Probably indicates someone trying to send an overly expensive query
              throw new Error('Query too large.');
            }
          }

          // Support for persistedQueries
          if (config.persistedQueries) {
            // eslint-disable-next-line no-param-reassign
            params.query = invertedMap[msg.payload.id];
          }

          let wsSessionUser = null;
          if (socket.upgradeReq) {
            const cookies = cookie.parse(socket.upgradeReq.headers.cookie);
            const sessionID = cookieParser.signedCookie(cookies['connect.sid'], config.sessionStoreSecret);

            const baseContext = {
              context: {
                //Repositories: new Repositories({ connector: gitHubConnector }),
                //Users: new Users({ connector: gitHubConnector }),
                //Entries: new Entries(),
                //Comments: new Comments(),

              },
            };

            const paramsWithFulfilledBaseContext = Object.assign({}, params, baseContext);

            if (!sessionID) {
              resolve(paramsWithFulfilledBaseContext);

              return;
            }

            // get the session object
            sessionStore.get(sessionID, (err, session) => {
              if (err) {
                throw new Error('Failed retrieving sessionID from the sessionStore.');
              }

              if (session && session.passport && session.passport.user) {
                const sessionUser = session.passport.user;
                wsSessionUser = {
                  login: sessionUser.username,
                  html_url: sessionUser.profileUrl,
                  avatar_url: sessionUser.photos[0].value,
                };

                resolve(Object.assign(paramsWithFulfilledBaseContext, {
                  context: Object.assign(paramsWithFulfilledBaseContext.context, {
                    user: wsSessionUser,
                  }),
                }));
              }

              resolve(paramsWithFulfilledBaseContext);
            });
          }
        });
      },
    },
    {
      path: WS_GQL_PATH,
      server,
    },
  );

  return server;
}
